{"name":"os-hardening","version":"4.0.0","description":"Installs and configures operating system hardening","long_description":"# os-hardening (Chef cookbook)\n\n[![Supermarket](http://img.shields.io/cookbook/v/os-hardening.svg)][1]\n[![Build Status](https://travis-ci.org/dev-sec/chef-os-hardening.svg?branch=master)][2]\n[![Code Coverage](http://img.shields.io/coveralls/dev-sec/chef-os-hardening.svg)][3]\n\n## Description\n\nThis cookbook provides numerous security-related configurations, providing all-round base protection.\n\nIt configures:\n\n * Configures package management e.g. allows only signed packages\n * Remove packages with known issues\n * Configures `pam` and `pam_limits` module\n * Shadow password suite configuration\n * Configures system path permissions\n * Disable core dumps via soft limits\n * Restrict Root Logins to System Console\n * Set SUIDs\n * Configures kernel parameters via sysctl\n\nIt will not:\n\n * Update system packages\n * Install security patches\n\n## Requirements\n\n* Chef >= 14.0\n\n### Platform\n\n- Debian 9\n- Ubuntu 16.04, 18.04\n- RHEL 6, 7\n- CentOS 6, 7\n- Oracle Linux 6, 7\n- Fedora 28, 29\n- OpenSuse Leap 42\n- Amazon Linux 1, 2\n\n## Attributes\n\n* `['os-hardening']['components'][COMPONENT_NAME]` - allows the fine control over which components should be executed via default recipe. See below for more details\n* `['os-hardening']['desktop']['enable'] = false`\n  true if this is a desktop system, ie Xorg, KDE/GNOME/Unity/etc\n* `['os-hardening']['network']['forwarding'] = false`\n  true if this system requires packet forwarding (eg Router), false otherwise\n* `['os-hardening']['network']['ipv6']['enable'] = false`\n* `['os-hardening']['network']['arp']['restricted'] = true`\n  true if you want the behavior of announcing and replying to ARP to be restricted, false otherwise\n* `['os-hardening']['env']['extra_user_paths'] = []`\n  add additional paths to the user's `PATH` variable (default is empty).\n* `['os-hardening']['env']['umask'] = \"027\"`\n* `['os-hardening']['env']['root_path'] = \"/\"`\n  where root is mounted\n* `['os-hardening']['auth']['pw_max_age'] = 60`\n  maximum password age\n* `['os-hardening']['auth']['pw_min_age'] = 7`\n  minimum password age (before allowing any other password change)\n* `['os-hardening']['auth']['pw_warn_age'] = 7`\n  number of days before maximum password age occurs to warn of impending\n  change\n* `['os-hardening']['auth']['uid_min'] = 1000`\n  lower bound of UIDs assigned by useradd\n* `['os-hardening']['auth']['uid_max'] = 60000`\n  upper bound of UIDs assigned by useradd\n* `['os-hardening']['auth']['gid_min'] = 1000`\n  lower bound of GIDs assigned by groupadd\n* `['os-hardening']['auth']['gid_max'] = 60000`\n  upper bound of GIDs assigned by groupadd\n* `['os-hardening']['auth']['retries'] = 5`\n  the maximum number of authentication attempts, before the account is locked for some time\n* `['os-hardening']['auth']['lockout_time'] = 600`\n  time in seconds that needs to pass, if the account was locked due to too many failed authentication attempts\n* `['os-hardening']['auth']['timeout'] = 60`\n  authentication timeout in seconds, so login will exit if this time passes\n* `['os-hardening']['auth']['allow_homeless'] = false`\n  true if to allow users without home to login\n* `['os-hardening']['auth']['pam']['passwdqc']['enable'] = true`\n  true if you want to use strong password checking in PAM using passwdqc\n* `['os-hardening']['auth']['pam']['passwdqc']['options'] = \"min=disabled,disabled,16,12,8\"`\n  set to any option line (as a string) that you want to pass to passwdqc\n* `['os-hardening']['auth']['pam']['passwdqc']['template_cookbook'] = 'os-hardening'`\n  set to the name of the cookbook from which the template is obtained for the `/usr/share/pam-configs/passwdqc` file\n* `['os-hardening']['auth']['pam']['tally2']['template_cookbook'] = 'os-hardening'`\n  set to the name of the cookbook from which the template is obtained for the `/usr/share/pam-configs/tally2` file\n* `['os-hardening']['auth']['pam']['system-auth']['template_cookbook'] = 'os-hardening'`\n  set to the name of the cookbook from which the template is obtained for the `/etc/pam.d/system-auth-ac` file\n* `['os-hardening']['security']['users']['allow'] = []`\n  list of things, that a user is allowed to do. May contain: `change_user`\n* `['os-hardening']['security']['kernel']['enable_module_loading'] = true`\n  true if you want to allowed to change kernel modules once the system is running (eg `modprobe`, `rmmod`)\n* `['os-hardening']['security']['kernel']['disable_filesystems'] = ['cramfs', 'freevxfs', 'jffs2', 'hfs', 'hfsplus', 'squashfs', 'udf', 'vfat']`\n  list of kernel file system modules, which are blacklisted for loading (e.g. they are unused and can be disabled). Set this to `[]` to completely avoid this blacklisting\n* `['os-hardening']['security']['kernel']['enable_sysrq'] = false`\n* `['os-hardening']['security']['kernel']['enable_core_dump'] = false`\n* `['os-hardening']['security']['suid_sgid']['enforce'] = true`\n  true if you want to reduce SUID/SGID bits. There is already a list of items which are searched for configured, but you can also add your own\n* `['os-hardening']['security']['suid_sgid']['blacklist'] = []`\n  a list of paths which should have their SUID/SGID bits removed\n* `['os-hardening']['security']['suid_sgid']['whitelist'] = []`\n  a list of paths which should not have their SUID/SGID bits altered\n* `['os-hardening']['security']['suid_sgid']['remove_from_unknown'] = false`\n  true if you want to remove SUID/SGID bits from any file, that is not explicitly configured in a `blacklist`. This will make every Chef run search through the mounted filesystems looking for SUID/SGID bits that are not configured in the default and user blacklist. If it finds an SUID/SGID bit, it will be removed, unless this file is in your `whitelist`.\n* `['os-hardening']['security']['suid_sgid']['dry_run_on_unknown'] = false`\n  like `remove_from_unknown` above, only that SUID/SGID bits aren't removed.\n  It will still search the filesystems to look for SUID/SGID bits but it will only print them in your log. This option is only ever recommended, when you first configure `remove_from_unknown` for SUID/SGID bits, so that you can see the files that are being changed and make adjustments to your `whitelist` and `blacklist`.\n* `['os-hardening']['security']['packages']['clean'] = true`\n  removes packages with known issues.\n* `['os-hardening']['security']['packages']['list'] = ['xinetd','inetd','ypserv','telnet-server','rsh-server']`\n  list of packages to remove, by default we remove the following packages:\n  * xinetd ([NSA](http://www.nsa.gov/ia/_files/os/redhat/rhel5-guide-i731.pdf), Chapter 3.2.1)\n  * inetd ([NSA](http://www.nsa.gov/ia/_files/os/redhat/rhel5-guide-i731.pdf), Chapter 3.2.1)\n  * tftp-server ([NSA](http://www.nsa.gov/ia/_files/os/redhat/rhel5-guide-i731.pdf), Chapter 3.2.5)\n  * ypserv ([NSA](http://www.nsa.gov/ia/_files/os/redhat/rhel5-guide-i731.pdf), Chapter 3.2.4)\n  * telnet-server ([NSA](http://www.nsa.gov/ia/_files/os/redhat/rhel5-guide-i731.pdf), Chapter 3.2.2)\n  * rsh-server ([NSA](http://www.nsa.gov/ia/_files/os/redhat/rhel5-guide-i731.pdf), Chapter 3.2.3)\n* `['os-hardening']['security']['selinux_mode'] = 'unmanaged'`\n  set to `unmanaged` if you want to let selinux configuration as it is. Set to `enforcing` to enforce or `permissive` to permissive SELinux.\n\n### Controlling the included components\n\n`default.rb` includes other components based on the ohai autodetection attributes of your system. E.g. do not execute selinux on non-RHEL systems. You can override this behavior and force components to be executed or not via setting attributes in `node['os-hardening']['components']` on the override level. Example\n\n```ruby\n# some attribute file\n# do not include sysctl and auditd\noverride['os-hardening']['components']['sysctl'] = false\noverride['os-hardening']['components']['auditd'] = false\n\n# force selinux to be included\noverride['os-hardening']['components']['selinux'] = true\n```\n\nIn the current implementation different components are located in the different recipes. See the available recipes or `default.rb` for possible component names.\n\n## Usage\n\nAdd the recipes to the `run_list`, it should be last:\n\n    \"recipe[os-hardening]\"\n\nConfigure attributes:\n\n    \"security\" : {\n      \"kernel\" : {\n        \"enable_module_loading\" : true\n      }\n    },\n\n## Local Testing\n\n### Local testing\n\nPlease install [chef-dk](https://downloads.chef.io/chefdk), [VirtualBox](https://www.virtualbox.org/) or VMware Workstation and [Vagrant](https://www.vagrantup.com/).\n\nLinting is checked with [rubocop](https://github.com/bbatsov/rubocop) and [foodcritic](http://www.foodcritic.io/):\n\n```bash\n$ chef exec rake lint\n.....\n```\n\nUnit/spec tests are done with [chefspec](https://github.com/sethvargo/chefspec):\n\n```bash\n$ chef exec rake spec\n.....\n```\n\nIntegration tests are done with [test-kitchen](http://kitchen.ci/) and [inspec](https://www.inspec.io/):\n\n```bash\n$ chef exec rake kitchen\n.....\n# or you can use the kitchen directly\n$ kitchen test\n```\n\n### CI testing of forks\n\nYou can enable testing of your fork in [Travis CI](http://travis-ci.org/). By default you will get linting, spec tests and integration tests with [kitchen-dokken].\n\nIntegration tests with [kitchen-dokken] do not cover everything as they run in the container environment.\nFull integration tests can be executed using [DigitalOcean](http://digitalocean.com/).\n\nIf you want to have full integration tests for your fork, you will have to add following [environment variables](https://docs.travis-ci.com/user/environment-variables/#Defining-Variables-in-Repository-Settings) in the settings of your fork:\n- `DIGITALOCEAN_ACCESS_TOKEN` - [access token for DigitalOcean](https://www.digitalocean.com/community/tutorials/how-to-use-the-digitalocean-api-v2)\n- `CI_SSH_KEY` - private part of some ssh key, available on DigitalOcean for your instances, in base64 encoded form (e.g. `cat id_rsa | base64 -w0 ; echo`)\n- `DIGITALOCEAN_SSH_KEY_IDS` - ID in DigitalOcean of `CI_SSH_KEY`, see [this](https://github.com/test-kitchen/kitchen-digitalocean#installation-and-setup) for more information\n\n## Contributors + Kudos\n\n* Dominik Richter [arlimus](https://github.com/arlimus)\n* Bernhard Weisshuhn [bkw](https://github.com/bkw)\n* Christoph Hartmann [chris-rock](https://github.com/chris-rock)\n* Edmund Haselwanter [ehaselwanter](https://github.com/ehaselwanter)\n* Patrick Meier [atomic111](https://github.com/atomic111)\n* Artem Sidorenko [artem-sidorenko](https://github.com/artem-sidorenko)\n\nThis cookbook is mostly based on guides by:\n\n* [Arch Linux wiki, Sysctl hardening](https://wiki.archlinux.org/index.php/Sysctl)\n* [Ubuntu Security/Features](https://wiki.ubuntu.com/Security/Features)\n* [NSA: Guide to the Secure Configuration of Red Hat Enterprise Linux 5](https://www.iad.gov/iad/library/ia-guidance/security-configuration/operating-systems/guide-to-the-secure-configuration-of-red-hat-enterprise.cfm)\n* [Deutsche Telekom, Group IT Security, Security Requirements (German)](https://www.telekom.com/psa)\n\n\nThanks to all of you!!\n\n## Contributing\n\nSee [contributor guideline](CONTRIBUTING.md).\n\n## License and Author\n\n* Author:: Dominik Richter <dominik.richter@googlemail.com>\n* Author:: Deutsche Telekom AG\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n[1]: https://supermarket.getchef.com/cookbooks/os-hardening\n[2]: http://travis-ci.org/dev-sec/chef-os-hardening\n[3]: https://coveralls.io/r/dev-sec/chef-os-hardening\n[kitchen-dokken]: https://github.com/someara/kitchen-dokken\n","maintainer":"Artem Sidorenko","maintainer_email":"artem@posteo.de","license":"Apache-2.0","platforms":{"amazon":">= 0.0.0","ubuntu":">= 16.04","debian":">= 9.0","centos":">= 6.0","redhat":">= 6.0","oracle":">= 6.4","fedora":">= 28.0","suse":">= 0.0.0","opensuseleap":">= 42.1"},"dependencies":{},"recommendations":{},"suggestions":{},"conflicting":{},"providing":{},"replacing":{},"attributes":{},"groupings":{},"recipes":{"os-hardening::default":"harden the operating system (all recipes)","os-hardening::limits":"prevent core dumps","os-hardening::login_defs":"harden /etc/login.defs","os-hardening::minimize_access":"enforce minimal file permissions","os-hardening::pam":"configure sane values for PAM","os-hardening::profile":"harden settings in /etc/profile.d","os-hardening::securetty":"limit the allowed TTYs for root login","os-hardening::suid_sgid":"reduce SUID and SGID bits in the filesystem","os-hardening::sysctl":"set sane sysctl values"},"source_url":"https://github.com/dev-sec/chef-os-hardening","issues_url":"https://github.com/dev-sec/chef-os-hardening/issues","chef_version":[[">= 14"]],"ohai_version":[]}