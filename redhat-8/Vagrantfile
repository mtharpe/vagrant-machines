Vagrant.require_version '>= 2.1.0'


MACHINE_NAME = 'redhat-8'.freeze

# Config engine (Ansible or Chef)
CONFIG_ENGINE = 'ansible'.freeze

# Ansible global controls
ANSIBLE_PLAYBOOK = 'ansible-centos-base'.freeze
ANSIBLE_ROLE = 'server'.freeze
ANSIBLE_SETUP_FILE = 'setup_server.yml'.freeze

user = ENV['RH_SUBSCRIPTION_MANAGER_USER']
password = ENV['RH_SUBSCRIPTION_MANAGER_PW']
if !user || !password
  puts 'Required environment variables not found. Please set RH_SUBSCRIPTION_MANAGER_USER and RH_SUBSCRIPTION_MANAGER_PW'
  abort
end

register_script = %(
if ! subscription-manager status; then
  sudo subscription-manager register --username=#{user} --password=#{password} --auto-attach
fi

dnf upgrade -y
)

unregister_script = %(
if subscription-manager status; then
  sudo subscription-manager unregister
fi
)

Vagrant.configure("2") do |config|
  config.vm.hostname = MACHINE_NAME
  config.vm.box = "generic/rhel8"
  config.vm.provider :libvirt do |domain|
      domain.memory = 2048
      domain.cpus = 1
      domain.nested = true
  # config.vm.network :private_network, :ip => '10.20.30.40'
  # config.vm.network :public_network, :ip => '10.20.30.41'
  config.hostmanager.enabled = true
  config.hostmanager.manage_host = true
  config.hostmanager.manage_guest = true
  config.hostmanager.ignore_private_ip = false
  config.hostmanager.include_offline = true
  end

  config.vm.provider :libvirt do |libvirt|
    libvirt.driver = "kvm"
    libvirt.storage_pool_name = "default"
    libvirt.snapshot_pool_name = "default"
    # libvirt.default_prefix = 'vagrant-'
    # libvirt.qemu_use_session = true
    # libvirt.host = "localhost"
    # libvirt.connect_via_ssh = false
    # libvirt.username = "root"
    # libvirt.password = "secret"
  end

  config.vm.provision 'shell', inline: register_script

  config.trigger.before :destroy do |trigger|
    trigger.name = 'Before Destroy trigger'
    trigger.info = 'Unregistering this VM from RedHat Subscription Manager...'
    trigger.warn = 'If this fails, unregister VMs manually at https://access.redhat.com/management/subscriptions'
    trigger.run_remote = { inline: unregister_script }
    trigger.on_error = :continue
  end

  if CONFIG_ENGINE == 'ansible'
    config.vm.provision 'ansible' do |ansible|
      ansible.playbook = "ansible/#{ANSIBLE_PLAYBOOK}/#{ANSIBLE_ROLE}/#{ANSIBLE_SETUP_FILE}"
    end
  else
    config.vm.provision 'shell', inline: <<-SHELL
      sudo dnf upgrade -y
    SHELL
  end
end
